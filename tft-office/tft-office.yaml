##
## This code has been shared to https://github.com/kdorff/esphome/tree/main/tft-office
##

##
## I'm testing connecting the ESP32 to the 2.8" ili9341 TFT
## SPI display (320x240) which contains a xpt2046 touchscreen
## for use within ESPHome and Home Assistant.
## At this time, I'm not tring to support the SD card.
##
## Link to tested product https://www.amazon.com/gp/product/B09XHJ9KRX
##
## Wiring
## --------
## The SPI pins, MOSI, MISO, and SCK, are shared between the display
## and the touchscreen (and SD card reader). TOUCH_IRQ is optional.
## If you don't wire it, make sure you comment out 
## touchscreen.interrupt_pin. The SD card pins are not connected.
## -- These may not be optimum wiring, but I've tested them.
##
## LCD to ESP32 (30 pin or d1 mini) wiring:
## * SCK/CLK to 18
## * MISO/DO/SDO to 19
## * MOSI/DIN/SDI to 23
## * DISP_CS to 33
## * DISP_LED to 17
## * TOUCH_CS to 32
## * DISP_DC to 5
## * DISP_RESET to 16
## * TOUCH_IRQ 21
## * VCC to 3V3
## * GND to GND
##

esphome:
  name: tft-office
  includes:
    - tft-room-time-temp.h
  #  - display-panel-dev.h
  libraries:
    esphome-display-panel=https://github.com/kdorff/esphome-display-panel.git#v0.0.6

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable Home Assistant API
api:
  encryption:
    key: !secret tft_test1_api_encryption

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "tft-office Fallback Hotspot"
    password: !secret fallback_wifi_password

# captive_portal:

# It appears there isn't enough RAM on the ESP32 to run the
# ili9341 and bluetooth_proxy at the same time. Even if I disable
# logger and captive_portal there doesn't seem to be enough RAM.
# bluetooth_proxy:
#  active: true

# Enable logging
logger:

color:
  - id: color_text_white
    red: 100%
    green: 100%
    blue: 100%
  - id: color_green
    red: 0%
    green: 100%
    blue: 0%

font:
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_font_45
    size: 45
    ## Method for using glyphs in YAML and C++ come from neil123's comments in
    ## https://tinyurl.com/esphome-font-glyphs
    ##
    ## Process:
    ## * Install the font materialdesignicons-webfont.ttf both locally
    ##   and in the the esphome/fonts folder.
    ## * Using Character Map UWP (available in the Microsoft Store), 
    ##   * Select the font materialdesignicons-webfont.ttf
    ##   * Find the symbol you want to use (you can search)
    ##   * Note it's name and code code (such as 'U+F0020' for 'alarm').
    glyphs:
      - "\U000F00E0" # 'brightness 5' (brightness up)
      - "\U000F00DE" # 'brightness 7' (brightness down)
      - "\U000F0020" # 'alarm' (brightness down)
  - file: "gfonts://Rubik@800"
    id: font_cont
    size: 70
  - file: "gfonts://Rubik@700"
    id: font_date
    size: 35
  - file: "gfonts://Rubik@700"
    id: font_day
    size: 35
  - file: "gfonts://Rubik@700"
    id: font_time
    size: 110
  - file: "gfonts://Rubik@800"
    id: font_temp
    size: 70
  - file: "gfonts://Rubik@500"
    id: font_temp_label
    size: 22
  - file: "gfonts://Rubik@600"
    id: font_flash
    size: 30

image:
  - file: "images/butterfly.png"
    id: butterfly_image
    type: RGB565
    resize: 200x200

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19

globals:
  - id: brightness
    type: float
    restore_value: yes
    initial_value: "1.0"

display:
  - platform: ili9xxx
    model: TFT 2.4
    cs_pin: 33
    dc_pin: 5
    reset_pin: 16
    rotation: 270
    ## The panels will redraw themselves completely.
    auto_clear_enabled: True
    update_interval: 0.1s
    lambda: |-
      static bool panelsInitialized = 0;
      if (!panelsInitialized) {
        initializePanels(it);
        panelsInitialized = 1;
      }

      updatePanelStates();
      drawPanels();

touchscreen:
  ##
  ## This is likely more responsive if I add T_IRQ
  ##
  platform: xpt2046
  id: touch
  cs_pin: 32
  interrupt_pin: 21
  swap_x_y: false
  ##
  ## From running calibration (code is commented out, below)
  ## for rotation: 0 these were good
  ## minx=426, maxx=3771, miny=471, maxy=3845
  calibration_x_min: 426
  calibration_x_max: 3771
  calibration_y_min: 3845
  calibration_y_max: 471
  ## Help eliminate phantom presses
  threshold: 400
  update_interval: 50ms
  report_interval: 200ms
  on_touch:
    then:
      # - lambda: |-
      #     ESP_LOGD("ili9341-touch", "x=%d, y=%d",
      #         (id(touch)).x,
      #         (id(touch)).y);
      - if:
          condition:
            lambda: |-
              return isPanelTouched((id(touch)).x, (id(touch)).y);
          then:
            - lambda: |-
                ESP_LOGD("yaml", "touched name=%s", (lastTouchedPanel->name.c_str()));
            - if:
                condition:
                  lambda: |-
                    return (lastTouchedPanel->name == "contUpPanel");
                then:
                  - lambda: |-
                      // Increase brightness 1%
                      id(brightness) = id(brightness) + 0.01 > 1 ? 1.0 : id(brightness) + 0.01;
                      id(backlight).set_level(id(brightness));
                      sprintf(buffer, "Increased to %.0f%%", id(brightness)*100);
                      enableFlash({"Brightness", buffer});
            - if:
                condition:
                  lambda: |-
                    return (lastTouchedPanel->name == "contDownPanel");
                then:
                  - lambda: |-
                      // Decrease brightness 1%
                      id(brightness) = id(brightness) - 0.01 < 0 ? 0.0 : id(brightness) - 0.01;
                      id(backlight).set_level(id(brightness));
                      sprintf(buffer, "Decreased to %.0f%%", id(brightness)*100);
                      enableFlash({"Brightness", buffer});

# Define a PWM output on the ESP32
output:
  - platform: ledc
    pin: 17
    id: backlight

text_sensor:
  - platform: template
    name: "tft-office Boot Timestamp"
    id: boot_timestamp
    icon: mdi:clock-start

time:
  - platform: homeassistant
    id: esptime
    on_time_sync:
      then:
        - lambda: !lambda |-
            static boolean bootTimestampSet = false;
            if (!bootTimestampSet) {
              bootTimestampSet = true;
              auto now = id(esptime).now();
              char buffer[20];
              now.strftime(buffer, sizeof(buffer), "%Y-%m-%dT%H:%M:%S");
              id(boot_timestamp).publish_state(buffer);
            }

sensor:
  ##
  ## Sensors we need to do our work.
  ##
  - platform: homeassistant
    id: back_yard_temperature
    entity_id: sensor.back_yard_sensor_temperature
  - platform: homeassistant
    id: inside_temperature
    entity_id: sensor.office_sensor_temperature
