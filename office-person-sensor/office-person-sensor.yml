##
## office-person-sensor.yaml does not use ESPHome's sen21231 component as I found
##
## A. It wasn't working reliably ... detection would flicker frequently. very odd.
## B. I wanted to have the additional details about the face detection to help debug
##
## This code is based on the Arduino code found here: https://github.com/usefulsensors/person_sensor_arduino
##
## So far, using the sensor directly seems to have far fewer false-positives and false-negatives.

esphome:
  name: office-person-sensor
  friendly_name: "Office Person Sensor"
  includes:
    - person_sensor/person_sensor.h
    - data-smoothing.h
  libraries:
    Wire
  on_boot:
    then:
      - lambda: !lambda |-
          Wire.begin();

esp8266:
  board: esp01_1m

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: !secret office_person_sensor_api_encryption

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "office-person-sensor FB Hotspot"
    password: !secret fallback_wifi_password

captive_portal:

binary_sensor:
  ## Exposed to HA.
  - id: office_person_sensor
    name: "Office Person Sensor"
    platform: template
    device_class: motion

sensor:
  ## Exposed to HA.
  - id: person_sensor_loop
    platform: template
    # device_class: motion
    update_interval: 1s
    internal: true
    lambda: !lambda |-
      person_sensor_results_t results = {};

      // Perform a read action on the I2C address of the sensor to get the
      // current face information detected.
      if (!person_sensor_read(&results)) {
        ESP_LOGE("person_sensor_loop", "No person sensor results found on the i2c bus");
        return {};
      }
      else {
        //
        // Log some debugging details from the sensor
        //
        ESP_LOGD("person_sensor_loop", "********");
        ESP_LOGD("person_sensor_loop", "%d faces found", results.num_faces);
        for (int i = 0; i < results.num_faces; ++i) {
          const person_sensor_face_t* face = &results.faces[i];
          ESP_LOGD("person_sensor_loop", "Face # %d: %d confidence (l=%d, t=%d, r=%d, b=%d) %s", 
            i, face->box_confidence,
            face->box_left, face->box_top, face->box_right, face->box_bottom,
            face->is_facing ? "facing" : "not facing");
        }

        //
        // Look for a face appearing or disappearing
        // THIS is the how we control binary_sensor.office_person_sensor
        //
        int maxConfidence = -1;
        for (int i = 0; i < results.num_faces; ++i) {
          const person_sensor_face_t* face = &results.faces[i];
          if (face->box_confidence > maxConfidence) {
            maxConfidence = face->box_confidence;
          }
        }

        // Use data smoothing to reduce false positives and negatives.
        // int sampleValue = results.num_faces > 0 ? maxConfidence : 0;
        // int faceFoundLikely = observeSample(sampleValue);
        // bool faceFound = faceFoundLikely > 60 ? true : false;

        // Report on data smoothing
        // ESP_LOGD("person_sensor_loop", "Data smoothing observeSample(%d)=%d", sampleValue, faceFoundLikely);
        // if (!faceFound && maxConfidence > -1) {
        //   ESP_LOGD("person_sensor_loop", "Data smoothing suggests someone isn't really there.");
        // }
        // if (faceFound && maxConfidence == -1) {
        //   // Value was smoothed to "1". Let's have some false confidence.
        //   ESP_LOGD("person_sensor_loop", "Data smoothing suggests someone may still be there.");
        // }

        if (results.num_faces > 0 && maxConfidence >= 85) {
          // Person detected with at least 90% confience.
          // We'll consider this an actual face.
          // At less than 90% we'll call it a false positive.
          if (id(office_person_sensor).state == true) {
            // Person already detected
            return {};
          }
          // Person was JUST detected
          id(office_person_sensor).publish_state(true);
          ESP_LOGD("person_sensor_loop", "Person just detected");
          return {};
        }
        else {
          // No person detected
          if (id(office_person_sensor).state == false) {
            // No person is the current state - no change.
            return {};
          }
          // Person was JUST not detected
          id(office_person_sensor).publish_state(false);
          ESP_LOGD("person_sensor_loop", "Person no longer detected");
          return {};
        }
      }
 